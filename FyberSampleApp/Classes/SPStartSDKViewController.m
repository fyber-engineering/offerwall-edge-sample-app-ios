//
//  SPStartSDKViewController.m
//  SponsorPay Sample App
//
//  Created by David Davila on 1/14/13.
// Copyright 2011-2013 SponsorPay. All rights reserved.
//
#import <QuartzCore/QuartzCore.h>

#import "SPStartSDKViewController.h"

static NSString *const SPPersistedAppIdKey = @"SPPersistedAppIdKey";
static NSString *const SPPersistedUserIdKey = @"SPPersistedUserIdKey";
static NSString *const SPPersistedSecurityTokenKey = @"SPPersistedSecurityTokenKey";
static NSString *const SPPersistedStagingStatusKey = @"SPPersistedStagingStatusKey";
static NSString *const SPPersistedCountryCodeKey = @"SPPersistedCountryCodeKey";
static NSString *const SPPersistedOSVersionKey = @"SPPersistedOSVersionKey";


@interface SPStartSDKViewController ()

@property (assign, nonatomic) BOOL staging;

@end

@implementation SPStartSDKViewController {
    CGSize _scrollViewOriginalContentSize;
    CGRect _startSDKGroupOriginalFrame;
    CGRect _credentialsSettingsGroupOriginalFrame;
    CGRect _stagingSettingsGroupOriginalFrame;
    CGRect _proxySettingsGroupOriginalFrame;
}


#pragma mark - Life Cycle

- (void)viewDidLoad
{
    [super viewDidLoad];
    _scrollViewOriginalContentSize = self.scrollView.contentSize;
    _startSDKGroupOriginalFrame = self.startSDKGroup.frame;
    _credentialsSettingsGroupOriginalFrame = self.credentialsSettingsGroup.frame;
    [self restorePersistedUserEnteredValues];
}


- (void)viewDidUnload
{
    [self setAppIdField:nil];
    [self setUserIdField:nil];
    [self setVcsKeyField:nil];
    [self setCurrencyNameField:nil];
    [self setShowCoinsNotificationSwitch:nil];
    [self setStartSDKGroup:nil];
    [self setCredentialsSettingsGroup:nil];
    [super viewDidUnload];
}


- (void)viewWillAppear:(BOOL)animated
{
    [super viewWillAppear:animated];
}


- (void)viewDidAppear:(BOOL)animated
{
    [super viewDidAppear:animated];
    [self adjustUIToInterfaceOrientation:[[UIApplication sharedApplication] statusBarOrientation]];
}

- (void)viewWillDisappear:(BOOL)animated
{
    [super viewWillDisappear:animated];
    [self persistUserEnteredValues];

    // removing notification used to check information about proxy when application become active
    [[NSNotificationCenter defaultCenter] removeObserver:self name:UIApplicationDidBecomeActiveNotification object:nil];
}


- (void)didReceiveMemoryWarning
{
    [super didReceiveMemoryWarning];
}


#pragma mark - Private

- (NSString *)createSDKCredentials
{
    NSString *credentials;
    BOOL allowAutoGeneratedUserId = [[NSUserDefaults standardUserDefaults] boolForKey:@"SPAllowAutoGeneratedUserId"];
    if (self.userIdField.text.length || !allowAutoGeneratedUserId) {
        credentials = [SponsorPaySDK startForAppId:self.appIdField.text
                                            userId:self.userIdField.text
                                     securityToken:self.vcsKeyField.text];
    } else {
        credentials =
        [SponsorPaySDK startWithAutogeneratedUserForAppId:self.appIdField.text securityToken:self.vcsKeyField.text];
    }

    return credentials;
}


- (void)displaySDKStartedFeedback
{
    [self flashView:self.startSDKGroup];
}

- (void)persistUserEnteredValues
{
    NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];
    [defaults setValue:self.appIdField.text forKey:SPPersistedAppIdKey];
    [defaults setValue:self.userIdField.text forKey:SPPersistedUserIdKey];
    [defaults setValue:self.vcsKeyField.text forKey:SPPersistedSecurityTokenKey];
    [defaults synchronize];
}

- (void)restorePersistedUserEnteredValues
{
    NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];
    self.appIdField.text = [defaults valueForKey:SPPersistedAppIdKey];
    self.userIdField.text = [defaults valueForKey:SPPersistedUserIdKey];
    self.vcsKeyField.text = [defaults valueForKey:SPPersistedSecurityTokenKey];
}


#pragma mark - Actions

- (IBAction)startSDK
{
    @try {
        NSString *credentialsToken = [self createSDKCredentials];

        self.currencyNameField.text = [SponsorPaySDK currencyNameForCredentials:credentialsToken];
        self.showCoinsNotificationSwitch.on =
        [SponsorPaySDK shouldShowPayoffNotificationOnVirtualCoinsReceivedForCredentials:credentialsToken];

        self.lastCredentialsToken = credentialsToken;

        [self displaySDKStartedFeedback];
    }
    @catch (NSException *exception)
    {
        [self showSDKException:exception];
    }
}

- (IBAction)userDidEnterCurrencyName:(UITextField *)sender
{
    @try {
        [SponsorPaySDK setCurrencyName:sender.text forCredentials:self.lastCredentialsToken];
        [self flashView:self.credentialsSettingsGroup];
    }
    @catch (NSException *exception)
    {
        [self showSDKException:exception];
        sender.text = @"";
    }
}


- (IBAction)showCoinsNotificationValueChanged:(UISwitch *)sender
{
    @try {
        [SponsorPaySDK setShowPayoffNotificationOnVirtualCoinsReceived:sender.on
                                                        forCredentials:self.lastCredentialsToken];
        [self flashView:self.credentialsSettingsGroup];
    }
    @catch (NSException *exception)
    {
        [self showSDKException:exception];
        sender.on = YES;
    }
}


- (IBAction)clearPersistedSDKData
{
    UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Clear SDK Data"
                                                    message:@"Clear persisted SDK data?\n"
                                                             "This includes the state of the Advertiser "
                                                             "and Action callbacks and the last "
                                                             "Transaction ID from the VCS."
                                                   delegate:self
                                          cancelButtonTitle:@"Don't clear"
                                          otherButtonTitles:@"Clear", nil];

    [alert show];
}

#pragma mark - Orientation
- (void)adjustUIToInterfaceOrientation:(UIInterfaceOrientation)toInterfaceOrientation
{
    static const CGFloat halfMargin = 2;

    if (UIInterfaceOrientationIsLandscape(toInterfaceOrientation)) {
        CGRect leftBlock = self.startSDKGroup.frame;
        leftBlock.origin.x = halfMargin * 2;
        leftBlock.size.width = (self.view.frame.size.width / 2) - (3 * halfMargin);
        self.startSDKGroup.frame = leftBlock;

        CGRect rightBlock = self.credentialsSettingsGroup.frame;
        rightBlock.size.width = leftBlock.size.width;
        rightBlock.origin.y = leftBlock.origin.y;
        rightBlock.origin.x = leftBlock.origin.x + leftBlock.size.width + 2 * halfMargin;
        self.credentialsSettingsGroup.frame = rightBlock;
    } else {
        self.startSDKGroup.frame = _startSDKGroupOriginalFrame;
        self.credentialsSettingsGroup.frame = _credentialsSettingsGroupOriginalFrame;
        self.scrollView.contentSize = _scrollViewOriginalContentSize;
    }
}

- (void)willAnimateRotationToInterfaceOrientation:(UIInterfaceOrientation)toInterfaceOrientation
                                         duration:(NSTimeInterval)duration
{
    [self adjustUIToInterfaceOrientation:toInterfaceOrientation];
}

#pragma mark - UIAlertViewDelegate

- (void)alertView:(UIAlertView *)alertView clickedButtonAtIndex:(NSInteger)buttonIndex
{
    if (buttonIndex == 1) {
        // The following does: [SPPersistence resetAllSDKValues];
        Class persistence = NSClassFromString(@"SPPersistence");
        SEL selector = NSSelectorFromString(@"resetAllSDKValues");

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Warc-performSelector-leaks"
        [persistence performSelector:selector];
#pragma clang diagnostic pop


        [[SponsorPaySDK instance] performSelector:@selector(clearCredentials)];
        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Done"
                                                        message:@"Persisted SDK data cleared.\n"
                                                                 "Tap on the \"Start SDK\" button to continue testing."
                                                       delegate:self
                                              cancelButtonTitle:@"Thanks!"
                                              otherButtonTitles:nil];

        [alert show];
    }
}

@end
